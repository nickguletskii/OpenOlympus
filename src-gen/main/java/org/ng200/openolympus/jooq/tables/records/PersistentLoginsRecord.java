/**
 * The MIT License
 * Copyright (c) 2014-2015 Nick Guletskii
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * This class is generated by jOOQ
 */
package org.ng200.openolympus.jooq.tables.records;


import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;
import org.ng200.openolympus.jooq.tables.PersistentLogins;
import org.ng200.openolympus.jooq.tables.interfaces.IPersistentLogins;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "persistent_logins", schema = "public")
public class PersistentLoginsRecord extends UpdatableRecordImpl<PersistentLoginsRecord> implements Record4<String, String, String, Timestamp>, IPersistentLogins {

	private static final long serialVersionUID = 819472198;

	/**
	 * Setter for <code>public.persistent_logins.username</code>.
	 */
	@Override
	public PersistentLoginsRecord setUsername(String value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>public.persistent_logins.username</code>.
	 */
	@Column(name = "username", nullable = false, length = 64)
	@Override
	public String getUsername() {
		return (String) getValue(0);
	}

	/**
	 * Setter for <code>public.persistent_logins.series</code>.
	 */
	@Override
	public PersistentLoginsRecord setSeries(String value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>public.persistent_logins.series</code>.
	 */
	@Id
	@Column(name = "series", unique = true, nullable = false, length = 64)
	@Override
	public String getSeries() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>public.persistent_logins.token</code>.
	 */
	@Override
	public PersistentLoginsRecord setToken(String value) {
		setValue(2, value);
		return this;
	}

	/**
	 * Getter for <code>public.persistent_logins.token</code>.
	 */
	@Column(name = "token", nullable = false, length = 64)
	@Override
	public String getToken() {
		return (String) getValue(2);
	}

	/**
	 * Setter for <code>public.persistent_logins.last_used</code>.
	 */
	@Override
	public PersistentLoginsRecord setLastUsed(Timestamp value) {
		setValue(3, value);
		return this;
	}

	/**
	 * Getter for <code>public.persistent_logins.last_used</code>.
	 */
	@Column(name = "last_used", nullable = false)
	@Override
	public Timestamp getLastUsed() {
		return (Timestamp) getValue(3);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<String> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record4 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<String, String, String, Timestamp> fieldsRow() {
		return (Row4) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row4<String, String, String, Timestamp> valuesRow() {
		return (Row4) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field1() {
		return PersistentLogins.PERSISTENT_LOGINS.USERNAME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return PersistentLogins.PERSISTENT_LOGINS.SERIES;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field3() {
		return PersistentLogins.PERSISTENT_LOGINS.TOKEN;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field4() {
		return PersistentLogins.PERSISTENT_LOGINS.LAST_USED;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value1() {
		return getUsername();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getSeries();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value3() {
		return getToken();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value4() {
		return getLastUsed();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PersistentLoginsRecord value1(String value) {
		setUsername(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PersistentLoginsRecord value2(String value) {
		setSeries(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PersistentLoginsRecord value3(String value) {
		setToken(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PersistentLoginsRecord value4(Timestamp value) {
		setLastUsed(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PersistentLoginsRecord values(String value1, String value2, String value3, Timestamp value4) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IPersistentLogins from) {
		setUsername(from.getUsername());
		setSeries(from.getSeries());
		setToken(from.getToken());
		setLastUsed(from.getLastUsed());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IPersistentLogins> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached PersistentLoginsRecord
	 */
	public PersistentLoginsRecord() {
		super(PersistentLogins.PERSISTENT_LOGINS);
	}

	/**
	 * Create a detached, initialised PersistentLoginsRecord
	 */
	public PersistentLoginsRecord(String username, String series, String token, Timestamp lastUsed) {
		super(PersistentLogins.PERSISTENT_LOGINS);

		setValue(0, username);
		setValue(1, series);
		setValue(2, token);
		setValue(3, lastUsed);
	}
}
