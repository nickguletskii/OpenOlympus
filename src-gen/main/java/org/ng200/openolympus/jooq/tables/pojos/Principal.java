/**
 * The MIT License
 * Copyright (c) 2014-2016 Nick Guletskii
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * This class is generated by jOOQ
 */
package org.ng200.openolympus.jooq.tables.pojos;


import java.util.Arrays;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import org.ng200.openolympus.jooq.enums.GeneralPermissionType;
import org.ng200.openolympus.jooq.tables.interfaces.IPrincipal;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "principal", schema = "public")
public class Principal implements IPrincipal {

	private static final long serialVersionUID = -1204379330;

	private Long                    id;
	private GeneralPermissionType[] permissions;

	public Principal() {}

	public Principal(Principal value) {
		this.id = value.id;
		this.permissions = value.permissions;
	}

	public Principal(
		Long                    id,
		GeneralPermissionType[] permissions
	) {
		this.id = id;
		this.permissions = permissions;
	}

	@Id
	@Column(name = "id", unique = true, nullable = false, precision = 64)
	@Override
	public Long getId() {
		return this.id;
	}

	@Override
	public Principal setId(Long id) {
		this.id = id;
		return this;
	}

	@Column(name = "permissions", nullable = false)
	@Override
	public GeneralPermissionType[] getPermissions() {
		return this.permissions;
	}

	@Override
	public Principal setPermissions(GeneralPermissionType[] permissions) {
		this.permissions = permissions;
		return this;
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("Principal (");

		sb.append(id);
		sb.append(", ").append(Arrays.toString(permissions));

		sb.append(")");
		return sb.toString();
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IPrincipal from) {
		setId(from.getId());
		setPermissions(from.getPermissions());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IPrincipal> E into(E into) {
		into.from(this);
		return into;
	}
}
