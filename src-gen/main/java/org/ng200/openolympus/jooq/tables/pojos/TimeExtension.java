/**
 * The MIT License
 * Copyright (c) 2014-2015 Nick Guletskii
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * This class is generated by jOOQ
 */
package org.ng200.openolympus.jooq.tables.pojos;


import java.time.Duration;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import org.ng200.openolympus.jooq.tables.interfaces.ITimeExtension;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "time_extension", schema = "public")
public class TimeExtension implements ITimeExtension {

	private static final long serialVersionUID = -2090920147;

	private Long     id;
	private Duration duration;
	private String   reason;
	private Long     userId;
	private Integer  contestId;

	public TimeExtension() {}

	public TimeExtension(TimeExtension value) {
		this.id = value.id;
		this.duration = value.duration;
		this.reason = value.reason;
		this.userId = value.userId;
		this.contestId = value.contestId;
	}

	public TimeExtension(
		Long     id,
		Duration duration,
		String   reason,
		Long     userId,
		Integer  contestId
	) {
		this.id = id;
		this.duration = duration;
		this.reason = reason;
		this.userId = userId;
		this.contestId = contestId;
	}

	@Id
	@Column(name = "id", unique = true, nullable = false, precision = 64)
	@Override
	public Long getId() {
		return this.id;
	}

	@Override
	public TimeExtension setId(Long id) {
		this.id = id;
		return this;
	}

	@Column(name = "duration", precision = 64)
	@Override
	public Duration getDuration() {
		return this.duration;
	}

	@Override
	public TimeExtension setDuration(Duration duration) {
		this.duration = duration;
		return this;
	}

	@Column(name = "reason")
	@Override
	public String getReason() {
		return this.reason;
	}

	@Override
	public TimeExtension setReason(String reason) {
		this.reason = reason;
		return this;
	}

	@Column(name = "user_id", nullable = false, precision = 64)
	@Override
	public Long getUserId() {
		return this.userId;
	}

	@Override
	public TimeExtension setUserId(Long userId) {
		this.userId = userId;
		return this;
	}

	@Column(name = "contest_id", nullable = false, precision = 32)
	@Override
	public Integer getContestId() {
		return this.contestId;
	}

	@Override
	public TimeExtension setContestId(Integer contestId) {
		this.contestId = contestId;
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(ITimeExtension from) {
		setId(from.getId());
		setDuration(from.getDuration());
		setReason(from.getReason());
		setUserId(from.getUserId());
		setContestId(from.getContestId());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends ITimeExtension> E into(E into) {
		into.from(this);
		return into;
	}
}
