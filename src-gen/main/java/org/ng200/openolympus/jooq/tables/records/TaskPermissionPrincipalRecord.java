/**
 * This class is generated by jOOQ
 */
package org.ng200.openolympus.jooq.tables.records;


import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;
import org.ng200.openolympus.jooq.tables.TaskPermissionPrincipal;
import org.ng200.openolympus.jooq.tables.interfaces.ITaskPermissionPrincipal;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "task_permission_principal", schema = "public")
public class TaskPermissionPrincipalRecord extends UpdatableRecordImpl<TaskPermissionPrincipalRecord> implements Record2<Long, Long>, ITaskPermissionPrincipal {

	private static final long serialVersionUID = -2045632309;

	/**
	 * Setter for <code>public.task_permission_principal.principal_id</code>.
	 */
	@Override
	public TaskPermissionPrincipalRecord setPrincipalId(Long value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>public.task_permission_principal.principal_id</code>.
	 */
	@Column(name = "principal_id", precision = 64)
	@Override
	public Long getPrincipalId() {
		return (Long) getValue(0);
	}

	/**
	 * Setter for <code>public.task_permission_principal.task_permission_id</code>.
	 */
	@Override
	public TaskPermissionPrincipalRecord setTaskPermissionId(Long value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>public.task_permission_principal.task_permission_id</code>.
	 */
	@Id
	@Column(name = "task_permission_id", unique = true, nullable = false, precision = 64)
	@Override
	public Long getTaskPermissionId() {
		return (Long) getValue(1);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Long> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record2 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<Long, Long> fieldsRow() {
		return (Row2) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<Long, Long> valuesRow() {
		return (Row2) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field1() {
		return TaskPermissionPrincipal.TASK_PERMISSION_PRINCIPAL.PRINCIPAL_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field2() {
		return TaskPermissionPrincipal.TASK_PERMISSION_PRINCIPAL.TASK_PERMISSION_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value1() {
		return getPrincipalId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value2() {
		return getTaskPermissionId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TaskPermissionPrincipalRecord value1(Long value) {
		setPrincipalId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TaskPermissionPrincipalRecord value2(Long value) {
		setTaskPermissionId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TaskPermissionPrincipalRecord values(Long value1, Long value2) {
		value1(value1);
		value2(value2);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(ITaskPermissionPrincipal from) {
		setPrincipalId(from.getPrincipalId());
		setTaskPermissionId(from.getTaskPermissionId());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends ITaskPermissionPrincipal> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached TaskPermissionPrincipalRecord
	 */
	public TaskPermissionPrincipalRecord() {
		super(TaskPermissionPrincipal.TASK_PERMISSION_PRINCIPAL);
	}

	/**
	 * Create a detached, initialised TaskPermissionPrincipalRecord
	 */
	public TaskPermissionPrincipalRecord(Long principalId, Long taskPermissionId) {
		super(TaskPermissionPrincipal.TASK_PERMISSION_PRINCIPAL);

		setValue(0, principalId);
		setValue(1, taskPermissionId);
	}
}
