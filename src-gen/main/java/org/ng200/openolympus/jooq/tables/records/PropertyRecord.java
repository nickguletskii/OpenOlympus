/**
 * This class is generated by jOOQ
 */
package org.ng200.openolympus.jooq.tables.records;


import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;
import org.ng200.openolympus.jooq.tables.Property;
import org.ng200.openolympus.jooq.tables.interfaces.IProperty;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "property", schema = "public")
public class PropertyRecord extends UpdatableRecordImpl<PropertyRecord> implements Record3<Long, String, byte[]>, IProperty {

	private static final long serialVersionUID = 446354112;

	/**
	 * Setter for <code>public.property.id</code>.
	 */
	@Override
	public PropertyRecord setId(Long value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>public.property.id</code>.
	 */
	@Id
	@Column(name = "id", unique = true, nullable = false, precision = 64)
	@Override
	public Long getId() {
		return (Long) getValue(0);
	}

	/**
	 * Setter for <code>public.property.property_key</code>.
	 */
	@Override
	public PropertyRecord setPropertyKey(String value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>public.property.property_key</code>.
	 */
	@Column(name = "property_key", unique = true, length = 255)
	@Override
	public String getPropertyKey() {
		return (String) getValue(1);
	}

	/**
	 * Setter for <code>public.property.property_value</code>.
	 */
	@Override
	public PropertyRecord setPropertyValue(byte[] value) {
		setValue(2, value);
		return this;
	}

	/**
	 * Getter for <code>public.property.property_value</code>.
	 */
	@Column(name = "property_value", unique = true)
	@Override
	public byte[] getPropertyValue() {
		return (byte[]) getValue(2);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Long> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record3 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<Long, String, byte[]> fieldsRow() {
		return (Row3) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<Long, String, byte[]> valuesRow() {
		return (Row3) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field1() {
		return Property.PROPERTY.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Property.PROPERTY.PROPERTY_KEY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<byte[]> field3() {
		return Property.PROPERTY.PROPERTY_VALUE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return getPropertyKey();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public byte[] value3() {
		return getPropertyValue();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PropertyRecord value1(Long value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PropertyRecord value2(String value) {
		setPropertyKey(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PropertyRecord value3(byte[] value) {
		setPropertyValue(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PropertyRecord values(Long value1, String value2, byte[] value3) {
		value1(value1);
		value2(value2);
		value3(value3);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IProperty from) {
		setId(from.getId());
		setPropertyKey(from.getPropertyKey());
		setPropertyValue(from.getPropertyValue());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IProperty> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached PropertyRecord
	 */
	public PropertyRecord() {
		super(Property.PROPERTY);
	}

	/**
	 * Create a detached, initialised PropertyRecord
	 */
	public PropertyRecord(Long id, String propertyKey, byte[] propertyValue) {
		super(Property.PROPERTY);

		setValue(0, id);
		setValue(1, propertyKey);
		setValue(2, propertyValue);
	}
}
