/**
 * The MIT License
 * Copyright (c) 2014-2015 Nick Guletskii
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * This class is generated by jOOQ
 */
package org.ng200.openolympus.jooq.enums;

import javax.annotation.Generated;

import org.jooq.EnumType;
import org.jooq.Schema;
import org.ng200.openolympus.jooq.Public;

/**
 * This class is generated by jOOQ.
 */
@Generated(value = {
						"http://www.jooq.org",
						"jOOQ version:3.6.2"
}, comments = "This class is generated by jOOQ")
@SuppressWarnings({
					"all",
					"unchecked",
					"rawtypes"
})
public enum VerdictStatusType implements EnumType {

	waiting("waiting"),

	ok("ok"),

	wrong_answer("wrong_answer"),

	runtime_error("runtime_error"),

	cpu_time_limit_exceeded("cpu_time_limit_exceeded"),

	real_time_limit_exceeded("real_time_limit_exceeded"),

	memory_limit_exceeded("memory_limit_exceeded"),

	disk_limit_exceeded("disk_limit_exceeded"),

	security_violated("security_violated"),

	internal_error("internal_error"),

	presentation_error("presentation_error"),

	output_limit_exceeded("output_limit_exceeded"),

	compile_error("compile_error");

	private final String literal;

	private VerdictStatusType(String literal) {
		this.literal = literal;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String getLiteral() {
		return this.literal;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String getName() {
		return "verdict_status_type";
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Schema getSchema() {
		return Public.PUBLIC;
	}
}
