/**
 * The MIT License
 * Copyright (c) 2014-2016 Nick Guletskii
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * This class is generated by jOOQ
 */
package org.ng200.openolympus.jooq.tables.records;


import java.math.BigDecimal;
import java.time.Duration;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record11;
import org.jooq.Row11;
import org.jooq.impl.UpdatableRecordImpl;
import org.ng200.openolympus.jooq.enums.VerdictStatusType;
import org.ng200.openolympus.jooq.tables.Verdict;
import org.ng200.openolympus.jooq.tables.interfaces.IVerdict;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "verdict", schema = "public")
public class VerdictRecord extends UpdatableRecordImpl<VerdictRecord> implements Record11<Long, BigDecimal, BigDecimal, VerdictStatusType, Boolean, String, Duration, Duration, Long, String, Long>, IVerdict {

	private static final long serialVersionUID = -1069143138;

	/**
	 * Setter for <code>public.verdict.id</code>.
	 */
	@Override
	public VerdictRecord setId(Long value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>public.verdict.id</code>.
	 */
	@Id
	@Column(name = "id", unique = true, nullable = false, precision = 64)
	@Override
	public Long getId() {
		return (Long) getValue(0);
	}

	/**
	 * Setter for <code>public.verdict.score</code>.
	 */
	@Override
	public VerdictRecord setScore(BigDecimal value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>public.verdict.score</code>.
	 */
	@Column(name = "score", precision = 19, scale = 2)
	@Override
	public BigDecimal getScore() {
		return (BigDecimal) getValue(1);
	}

	/**
	 * Setter for <code>public.verdict.maximum_score</code>.
	 */
	@Override
	public VerdictRecord setMaximumScore(BigDecimal value) {
		setValue(2, value);
		return this;
	}

	/**
	 * Getter for <code>public.verdict.maximum_score</code>.
	 */
	@Column(name = "maximum_score", nullable = false, precision = 19, scale = 2)
	@Override
	public BigDecimal getMaximumScore() {
		return (BigDecimal) getValue(2);
	}

	/**
	 * Setter for <code>public.verdict.status</code>.
	 */
	@Override
	public VerdictRecord setStatus(VerdictStatusType value) {
		setValue(3, value);
		return this;
	}

	/**
	 * Getter for <code>public.verdict.status</code>.
	 */
	@Column(name = "status", nullable = false)
	@Override
	public VerdictStatusType getStatus() {
		return (VerdictStatusType) getValue(3);
	}

	/**
	 * Setter for <code>public.verdict.viewable_during_contest</code>.
	 */
	@Override
	public VerdictRecord setViewableDuringContest(Boolean value) {
		setValue(4, value);
		return this;
	}

	/**
	 * Getter for <code>public.verdict.viewable_during_contest</code>.
	 */
	@Column(name = "viewable_during_contest", nullable = false)
	@Override
	public Boolean getViewableDuringContest() {
		return (Boolean) getValue(4);
	}

	/**
	 * Setter for <code>public.verdict.path</code>.
	 */
	@Override
	public VerdictRecord setPath(String value) {
		setValue(5, value);
		return this;
	}

	/**
	 * Getter for <code>public.verdict.path</code>.
	 */
	@Column(name = "path", nullable = false)
	@Override
	public String getPath() {
		return (String) getValue(5);
	}

	/**
	 * Setter for <code>public.verdict.cpu_time</code>.
	 */
	@Override
	public VerdictRecord setCpuTime(Duration value) {
		setValue(6, value);
		return this;
	}

	/**
	 * Getter for <code>public.verdict.cpu_time</code>.
	 */
	@Column(name = "cpu_time", precision = 64)
	@Override
	public Duration getCpuTime() {
		return (Duration) getValue(6);
	}

	/**
	 * Setter for <code>public.verdict.real_time</code>.
	 */
	@Override
	public VerdictRecord setRealTime(Duration value) {
		setValue(7, value);
		return this;
	}

	/**
	 * Getter for <code>public.verdict.real_time</code>.
	 */
	@Column(name = "real_time", precision = 64)
	@Override
	public Duration getRealTime() {
		return (Duration) getValue(7);
	}

	/**
	 * Setter for <code>public.verdict.memory_peak</code>.
	 */
	@Override
	public VerdictRecord setMemoryPeak(Long value) {
		setValue(8, value);
		return this;
	}

	/**
	 * Getter for <code>public.verdict.memory_peak</code>.
	 */
	@Column(name = "memory_peak", precision = 64)
	@Override
	public Long getMemoryPeak() {
		return (Long) getValue(8);
	}

	/**
	 * Setter for <code>public.verdict.additional_information</code>.
	 */
	@Override
	public VerdictRecord setAdditionalInformation(String value) {
		setValue(9, value);
		return this;
	}

	/**
	 * Getter for <code>public.verdict.additional_information</code>.
	 */
	@Column(name = "additional_information")
	@Override
	public String getAdditionalInformation() {
		return (String) getValue(9);
	}

	/**
	 * Setter for <code>public.verdict.solution_id</code>.
	 */
	@Override
	public VerdictRecord setSolutionId(Long value) {
		setValue(10, value);
		return this;
	}

	/**
	 * Getter for <code>public.verdict.solution_id</code>.
	 */
	@Column(name = "solution_id", precision = 64)
	@Override
	public Long getSolutionId() {
		return (Long) getValue(10);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Long> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record11 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row11<Long, BigDecimal, BigDecimal, VerdictStatusType, Boolean, String, Duration, Duration, Long, String, Long> fieldsRow() {
		return (Row11) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row11<Long, BigDecimal, BigDecimal, VerdictStatusType, Boolean, String, Duration, Duration, Long, String, Long> valuesRow() {
		return (Row11) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field1() {
		return Verdict.VERDICT.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<BigDecimal> field2() {
		return Verdict.VERDICT.SCORE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<BigDecimal> field3() {
		return Verdict.VERDICT.MAXIMUM_SCORE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<VerdictStatusType> field4() {
		return Verdict.VERDICT.STATUS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Boolean> field5() {
		return Verdict.VERDICT.VIEWABLE_DURING_CONTEST;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field6() {
		return Verdict.VERDICT.PATH;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Duration> field7() {
		return Verdict.VERDICT.CPU_TIME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Duration> field8() {
		return Verdict.VERDICT.REAL_TIME;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field9() {
		return Verdict.VERDICT.MEMORY_PEAK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field10() {
		return Verdict.VERDICT.ADDITIONAL_INFORMATION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field11() {
		return Verdict.VERDICT.SOLUTION_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BigDecimal value2() {
		return getScore();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BigDecimal value3() {
		return getMaximumScore();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public VerdictStatusType value4() {
		return getStatus();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Boolean value5() {
		return getViewableDuringContest();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value6() {
		return getPath();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Duration value7() {
		return getCpuTime();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Duration value8() {
		return getRealTime();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value9() {
		return getMemoryPeak();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value10() {
		return getAdditionalInformation();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value11() {
		return getSolutionId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public VerdictRecord value1(Long value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public VerdictRecord value2(BigDecimal value) {
		setScore(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public VerdictRecord value3(BigDecimal value) {
		setMaximumScore(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public VerdictRecord value4(VerdictStatusType value) {
		setStatus(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public VerdictRecord value5(Boolean value) {
		setViewableDuringContest(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public VerdictRecord value6(String value) {
		setPath(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public VerdictRecord value7(Duration value) {
		setCpuTime(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public VerdictRecord value8(Duration value) {
		setRealTime(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public VerdictRecord value9(Long value) {
		setMemoryPeak(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public VerdictRecord value10(String value) {
		setAdditionalInformation(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public VerdictRecord value11(Long value) {
		setSolutionId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public VerdictRecord values(Long value1, BigDecimal value2, BigDecimal value3, VerdictStatusType value4, Boolean value5, String value6, Duration value7, Duration value8, Long value9, String value10, Long value11) {
		value1(value1);
		value2(value2);
		value3(value3);
		value4(value4);
		value5(value5);
		value6(value6);
		value7(value7);
		value8(value8);
		value9(value9);
		value10(value10);
		value11(value11);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IVerdict from) {
		setId(from.getId());
		setScore(from.getScore());
		setMaximumScore(from.getMaximumScore());
		setStatus(from.getStatus());
		setViewableDuringContest(from.getViewableDuringContest());
		setPath(from.getPath());
		setCpuTime(from.getCpuTime());
		setRealTime(from.getRealTime());
		setMemoryPeak(from.getMemoryPeak());
		setAdditionalInformation(from.getAdditionalInformation());
		setSolutionId(from.getSolutionId());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IVerdict> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached VerdictRecord
	 */
	public VerdictRecord() {
		super(Verdict.VERDICT);
	}

	/**
	 * Create a detached, initialised VerdictRecord
	 */
	public VerdictRecord(Long id, BigDecimal score, BigDecimal maximumScore, VerdictStatusType status, Boolean viewableDuringContest, String path, Duration cpuTime, Duration realTime, Long memoryPeak, String additionalInformation, Long solutionId) {
		super(Verdict.VERDICT);

		setValue(0, id);
		setValue(1, score);
		setValue(2, maximumScore);
		setValue(3, status);
		setValue(4, viewableDuringContest);
		setValue(5, path);
		setValue(6, cpuTime);
		setValue(7, realTime);
		setValue(8, memoryPeak);
		setValue(9, additionalInformation);
		setValue(10, solutionId);
	}
}
