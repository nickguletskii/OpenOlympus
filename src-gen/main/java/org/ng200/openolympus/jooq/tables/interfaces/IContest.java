/**
 * The MIT License
 * Copyright (c) 2014-2015 Nick Guletskii
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * This class is generated by jOOQ
 */
package org.ng200.openolympus.jooq.tables.interfaces;


import java.io.Serializable;
import java.sql.Timestamp;
import java.time.Duration;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "contest", schema = "public")
public interface IContest extends Serializable {

	/**
	 * Setter for <code>public.contest.id</code>.
	 */
	public IContest setId(Integer value);

	/**
	 * Getter for <code>public.contest.id</code>.
	 */
	@Id
	@Column(name = "id", unique = true, nullable = false, precision = 32)
	public Integer getId();

	/**
	 * Setter for <code>public.contest.duration</code>.
	 */
	public IContest setDuration(Duration value);

	/**
	 * Getter for <code>public.contest.duration</code>.
	 */
	@Column(name = "duration", precision = 64)
	public Duration getDuration();

	/**
	 * Setter for <code>public.contest.name</code>.
	 */
	public IContest setName(String value);

	/**
	 * Getter for <code>public.contest.name</code>.
	 */
	@Column(name = "name", unique = true, length = 255)
	public String getName();

	/**
	 * Setter for <code>public.contest.show_full_tests_during_contest</code>.
	 */
	public IContest setShowFullTestsDuringContest(Boolean value);

	/**
	 * Getter for <code>public.contest.show_full_tests_during_contest</code>.
	 */
	@Column(name = "show_full_tests_during_contest", nullable = false)
	public Boolean getShowFullTestsDuringContest();

	/**
	 * Setter for <code>public.contest.start_time</code>.
	 */
	public IContest setStartTime(Timestamp value);

	/**
	 * Getter for <code>public.contest.start_time</code>.
	 */
	@Column(name = "start_time")
	public Timestamp getStartTime();

	/**
	 * Setter for <code>public.contest.owner</code>.
	 */
	public IContest setOwner(Long value);

	/**
	 * Getter for <code>public.contest.owner</code>.
	 */
	@Column(name = "owner", precision = 64)
	public Long getOwner();

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * Load data from another generated Record/POJO implementing the common interface IContest
	 */
	public void from(org.ng200.openolympus.jooq.tables.interfaces.IContest from);

	/**
	 * Copy data into another generated Record/POJO implementing the common interface IContest
	 */
	public <E extends org.ng200.openolympus.jooq.tables.interfaces.IContest> E into(E into);
}
