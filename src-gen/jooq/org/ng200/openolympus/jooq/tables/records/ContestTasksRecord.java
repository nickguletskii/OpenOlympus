/**
 * This class is generated by jOOQ
 */
package org.ng200.openolympus.jooq.tables.records;


import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;
import org.ng200.openolympus.jooq.tables.ContestTasks;
import org.ng200.openolympus.jooq.tables.interfaces.IContestTasks;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "contest_tasks", schema = "public", uniqueConstraints = {
	@UniqueConstraint(columnNames = {"id_contest", "id_task"})
})
public class ContestTasksRecord extends UpdatableRecordImpl<ContestTasksRecord> implements Record2<Integer, Integer>, IContestTasks {

	private static final long serialVersionUID = -900589033;

	/**
	 * Setter for <code>public.contest_tasks.id_contest</code>.
	 */
	@Override
	public ContestTasksRecord setIdContest(Integer value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>public.contest_tasks.id_contest</code>.
	 */
	@Column(name = "id_contest", nullable = false, precision = 32)
	@Override
	public Integer getIdContest() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>public.contest_tasks.id_task</code>.
	 */
	@Override
	public ContestTasksRecord setIdTask(Integer value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>public.contest_tasks.id_task</code>.
	 */
	@Column(name = "id_task", nullable = false, precision = 32)
	@Override
	public Integer getIdTask() {
		return (Integer) getValue(1);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record2<Integer, Integer> key() {
		return (Record2) super.key();
	}

	// -------------------------------------------------------------------------
	// Record2 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<Integer, Integer> fieldsRow() {
		return (Row2) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<Integer, Integer> valuesRow() {
		return (Row2) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return ContestTasks.CONTEST_TASKS.ID_CONTEST;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field2() {
		return ContestTasks.CONTEST_TASKS.ID_TASK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getIdContest();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value2() {
		return getIdTask();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ContestTasksRecord value1(Integer value) {
		setIdContest(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ContestTasksRecord value2(Integer value) {
		setIdTask(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ContestTasksRecord values(Integer value1, Integer value2) {
		value1(value1);
		value2(value2);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IContestTasks from) {
		setIdContest(from.getIdContest());
		setIdTask(from.getIdTask());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IContestTasks> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached ContestTasksRecord
	 */
	public ContestTasksRecord() {
		super(ContestTasks.CONTEST_TASKS);
	}

	/**
	 * Create a detached, initialised ContestTasksRecord
	 */
	public ContestTasksRecord(Integer idContest, Integer idTask) {
		super(ContestTasks.CONTEST_TASKS);

		setValue(0, idContest);
		setValue(1, idTask);
	}
}
