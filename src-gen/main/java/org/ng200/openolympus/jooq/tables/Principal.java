/**
 * The MIT License
 * Copyright (c) 2014-2015 Nick Guletskii
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * This class is generated by jOOQ
 */
package org.ng200.openolympus.jooq.tables;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.ng200.openolympus.jooq.Keys;
import org.ng200.openolympus.jooq.Public;
import org.ng200.openolympus.jooq.enums.GeneralPermissionType;
import org.ng200.openolympus.jooq.tables.records.PrincipalRecord;

/**
 * This class is generated by jOOQ.
 */
@Generated(value = {
						"http://www.jooq.org",
						"jOOQ version:3.6.2"
}, comments = "This class is generated by jOOQ")
@SuppressWarnings({
					"all",
					"unchecked",
					"rawtypes"
})
public class Principal extends TableImpl<PrincipalRecord> {

	private static final long serialVersionUID = -126379051;

	/**
	 * The reference instance of <code>public.principal</code>
	 */
	public static final Principal PRINCIPAL = new Principal();

	/**
	 * The column <code>public.principal.id</code>.
	 */
	public final TableField<PrincipalRecord, Long> ID = AbstractTable
			.createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false)
					.defaulted(true), this, "");

	/**
	 * The column <code>public.principal.permissions</code>.
	 */
	public final TableField<PrincipalRecord, GeneralPermissionType[]> PERMISSIONS = AbstractTable
			.createField("permissions",
					org.jooq.util.postgres.PostgresDataType.VARCHAR
							.asEnumDataType(
									org.ng200.openolympus.jooq.enums.GeneralPermissionType.class)
							.getArrayDataType(),
					this, "");

	/**
	 * Create a <code>public.principal</code> table reference
	 */
	public Principal() {
		this("principal", null);
	}

	/**
	 * Create an aliased <code>public.principal</code> table reference
	 */
	public Principal(String alias) {
		this(alias, Principal.PRINCIPAL);
	}

	private Principal(String alias, Table<PrincipalRecord> aliased) {
		this(alias, aliased, null);
	}

	private Principal(String alias, Table<PrincipalRecord> aliased,
			Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Principal as(String alias) {
		return new Principal(alias, this);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<PrincipalRecord, Long> getIdentity() {
		return Keys.IDENTITY_PRINCIPAL;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<PrincipalRecord>> getKeys() {
		return Arrays.<UniqueKey<PrincipalRecord>> asList(Keys.PRINCIPAL_PK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<PrincipalRecord> getPrimaryKey() {
		return Keys.PRINCIPAL_PK;
	}

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<PrincipalRecord> getRecordType() {
		return PrincipalRecord.class;
	}

	/**
	 * Rename this table
	 */
	public Principal rename(String name) {
		return new Principal(name, null);
	}
}
