/**
 * The MIT License
 * Copyright (c) 2014-2015 Nick Guletskii
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * This class is generated by jOOQ
 */
package org.ng200.openolympus.jooq.tables.records;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;
import org.ng200.openolympus.jooq.tables.ContestMessage;
import org.ng200.openolympus.jooq.tables.interfaces.IContestMessage;

/**
 * This class is generated by jOOQ.
 */
@Generated(value = {
						"http://www.jooq.org",
						"jOOQ version:3.6.2"
}, comments = "This class is generated by jOOQ")
@SuppressWarnings({
					"all",
					"unchecked",
					"rawtypes"
})
@Entity
@Table(name = "contest_message", schema = "public")
public class ContestMessageRecord
		extends UpdatableRecordImpl<ContestMessageRecord>implements
		Record5<Integer, String, String, Long, Integer>, IContestMessage {

	private static final long serialVersionUID = -467000208;

	/**
	 * Create a detached ContestMessageRecord
	 */
	public ContestMessageRecord() {
		super(ContestMessage.CONTEST_MESSAGE);
	}

	/**
	 * Create a detached, initialised ContestMessageRecord
	 */
	public ContestMessageRecord(Integer id, String question, String response,
			Long userId, Integer contestId) {
		super(ContestMessage.CONTEST_MESSAGE);

		this.setValue(0, id);
		this.setValue(1, question);
		this.setValue(2, response);
		this.setValue(3, userId);
		this.setValue(4, contestId);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return ContestMessage.CONTEST_MESSAGE.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return ContestMessage.CONTEST_MESSAGE.QUESTION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field3() {
		return ContestMessage.CONTEST_MESSAGE.RESPONSE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field4() {
		return ContestMessage.CONTEST_MESSAGE.USER_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field5() {
		return ContestMessage.CONTEST_MESSAGE.CONTEST_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row5<Integer, String, String, Long, Integer> fieldsRow() {
		return (Row5) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IContestMessage from) {
		this.setId(from.getId());
		this.setQuestion(from.getQuestion());
		this.setResponse(from.getResponse());
		this.setUserId(from.getUserId());
		this.setContestId(from.getContestId());
	}

	/**
	 * Getter for <code>public.contest_message.contest_id</code>.
	 */
	@Column(name = "contest_id", nullable = false, precision = 32)
	@Override
	public Integer getContestId() {
		return (Integer) this.getValue(4);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * Getter for <code>public.contest_message.id</code>.
	 */
	@Id
	@Column(name = "id", unique = true, nullable = false, precision = 32)
	@Override
	public Integer getId() {
		return (Integer) this.getValue(0);
	}

	// -------------------------------------------------------------------------
	// Record5 type implementation
	// -------------------------------------------------------------------------

	/**
	 * Getter for <code>public.contest_message.question</code>.
	 */
	@Column(name = "question")
	@Override
	public String getQuestion() {
		return (String) this.getValue(1);
	}

	/**
	 * Getter for <code>public.contest_message.response</code>.
	 */
	@Column(name = "response")
	@Override
	public String getResponse() {
		return (String) this.getValue(2);
	}

	/**
	 * Getter for <code>public.contest_message.user_id</code>.
	 */
	@Column(name = "user_id", nullable = false, precision = 64)
	@Override
	public Long getUserId() {
		return (Long) this.getValue(3);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IContestMessage> E into(E into) {
		into.from(this);
		return into;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Integer> key() {
		return (Record1) super.key();
	}

	/**
	 * Setter for <code>public.contest_message.contest_id</code>.
	 */
	@Override
	public ContestMessageRecord setContestId(Integer value) {
		this.setValue(4, value);
		return this;
	}

	/**
	 * Setter for <code>public.contest_message.id</code>.
	 */
	@Override
	public ContestMessageRecord setId(Integer value) {
		this.setValue(0, value);
		return this;
	}

	/**
	 * Setter for <code>public.contest_message.question</code>.
	 */
	@Override
	public ContestMessageRecord setQuestion(String value) {
		this.setValue(1, value);
		return this;
	}

	/**
	 * Setter for <code>public.contest_message.response</code>.
	 */
	@Override
	public ContestMessageRecord setResponse(String value) {
		this.setValue(2, value);
		return this;
	}

	/**
	 * Setter for <code>public.contest_message.user_id</code>.
	 */
	@Override
	public ContestMessageRecord setUserId(Long value) {
		this.setValue(3, value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return this.getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ContestMessageRecord value1(Integer value) {
		this.setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return this.getQuestion();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ContestMessageRecord value2(String value) {
		this.setQuestion(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value3() {
		return this.getResponse();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ContestMessageRecord value3(String value) {
		this.setResponse(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value4() {
		return this.getUserId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ContestMessageRecord value4(Long value) {
		this.setUserId(value);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value5() {
		return this.getContestId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ContestMessageRecord value5(Integer value) {
		this.setContestId(value);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ContestMessageRecord values(Integer value1, String value2,
			String value3, Long value4, Integer value5) {
		this.value1(value1);
		this.value2(value2);
		this.value3(value3);
		this.value4(value4);
		this.value5(value5);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row5<Integer, String, String, Long, Integer> valuesRow() {
		return (Row5) super.valuesRow();
	}
}
