/**
 * This class is generated by jOOQ
 */
package org.ng200.openolympus.jooq.tables.daos;


import java.math.BigDecimal;
import java.time.Duration;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.ng200.openolympus.jooq.enums.VerdictStatusType;
import org.ng200.openolympus.jooq.tables.Verdict;
import org.ng200.openolympus.jooq.tables.records.VerdictRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VerdictDao extends DAOImpl<VerdictRecord, org.ng200.openolympus.jooq.tables.pojos.Verdict, Long> {

	/**
	 * Create a new VerdictDao without any configuration
	 */
	public VerdictDao() {
		super(Verdict.VERDICT, org.ng200.openolympus.jooq.tables.pojos.Verdict.class);
	}

	/**
	 * Create a new VerdictDao with an attached configuration
	 */
	public VerdictDao(Configuration configuration) {
		super(Verdict.VERDICT, org.ng200.openolympus.jooq.tables.pojos.Verdict.class, configuration);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected Long getId(org.ng200.openolympus.jooq.tables.pojos.Verdict object) {
		return object.getId();
	}

	/**
	 * Fetch records that have <code>id IN (values)</code>
	 */
	public List<org.ng200.openolympus.jooq.tables.pojos.Verdict> fetchById(Long... values) {
		return fetch(Verdict.VERDICT.ID, values);
	}

	/**
	 * Fetch a unique record that has <code>id = value</code>
	 */
	public org.ng200.openolympus.jooq.tables.pojos.Verdict fetchOneById(Long value) {
		return fetchOne(Verdict.VERDICT.ID, value);
	}

	/**
	 * Fetch records that have <code>score IN (values)</code>
	 */
	public List<org.ng200.openolympus.jooq.tables.pojos.Verdict> fetchByScore(BigDecimal... values) {
		return fetch(Verdict.VERDICT.SCORE, values);
	}

	/**
	 * Fetch records that have <code>maximum_score IN (values)</code>
	 */
	public List<org.ng200.openolympus.jooq.tables.pojos.Verdict> fetchByMaximumScore(BigDecimal... values) {
		return fetch(Verdict.VERDICT.MAXIMUM_SCORE, values);
	}

	/**
	 * Fetch records that have <code>status IN (values)</code>
	 */
	public List<org.ng200.openolympus.jooq.tables.pojos.Verdict> fetchByStatus(VerdictStatusType... values) {
		return fetch(Verdict.VERDICT.STATUS, values);
	}

	/**
	 * Fetch records that have <code>viewable_during_contest IN (values)</code>
	 */
	public List<org.ng200.openolympus.jooq.tables.pojos.Verdict> fetchByViewableDuringContest(Boolean... values) {
		return fetch(Verdict.VERDICT.VIEWABLE_DURING_CONTEST, values);
	}

	/**
	 * Fetch records that have <code>path IN (values)</code>
	 */
	public List<org.ng200.openolympus.jooq.tables.pojos.Verdict> fetchByPath(String... values) {
		return fetch(Verdict.VERDICT.PATH, values);
	}

	/**
	 * Fetch records that have <code>cpu_time IN (values)</code>
	 */
	public List<org.ng200.openolympus.jooq.tables.pojos.Verdict> fetchByCpuTime(Duration... values) {
		return fetch(Verdict.VERDICT.CPU_TIME, values);
	}

	/**
	 * Fetch records that have <code>real_time IN (values)</code>
	 */
	public List<org.ng200.openolympus.jooq.tables.pojos.Verdict> fetchByRealTime(Duration... values) {
		return fetch(Verdict.VERDICT.REAL_TIME, values);
	}

	/**
	 * Fetch records that have <code>memory_peak IN (values)</code>
	 */
	public List<org.ng200.openolympus.jooq.tables.pojos.Verdict> fetchByMemoryPeak(Long... values) {
		return fetch(Verdict.VERDICT.MEMORY_PEAK, values);
	}

	/**
	 * Fetch records that have <code>additional_information IN (values)</code>
	 */
	public List<org.ng200.openolympus.jooq.tables.pojos.Verdict> fetchByAdditionalInformation(String... values) {
		return fetch(Verdict.VERDICT.ADDITIONAL_INFORMATION, values);
	}

	/**
	 * Fetch records that have <code>solution_id IN (values)</code>
	 */
	public List<org.ng200.openolympus.jooq.tables.pojos.Verdict> fetchBySolutionId(Long... values) {
		return fetch(Verdict.VERDICT.SOLUTION_ID, values);
	}
	public org.ng200.openolympus.jooq.tables.pojos.Verdict fetchOneById(String id) {
		return fetchOneById(java.lang.Long.valueOf(id));
	}
}
