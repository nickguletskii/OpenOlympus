/**
 * The MIT License
 * Copyright (c) 2014-2016 Nick Guletskii
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * This class is generated by jOOQ
 */
package org.ng200.openolympus.jooq.tables.records;


import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;
import org.ng200.openolympus.jooq.enums.TaskPermissionType;
import org.ng200.openolympus.jooq.tables.TaskPermission;
import org.ng200.openolympus.jooq.tables.interfaces.ITaskPermission;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "task_permission", schema = "public", uniqueConstraints = {
	@UniqueConstraint(columnNames = {"permission", "task_id", "principal_id"})
})
public class TaskPermissionRecord extends UpdatableRecordImpl<TaskPermissionRecord> implements Record3<Integer, Long, TaskPermissionType>, ITaskPermission {

	private static final long serialVersionUID = -1688713708;

	/**
	 * Setter for <code>public.task_permission.task_id</code>.
	 */
	@Override
	public TaskPermissionRecord setTaskId(Integer value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>public.task_permission.task_id</code>.
	 */
	@Column(name = "task_id", nullable = false, precision = 32)
	@Override
	public Integer getTaskId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>public.task_permission.principal_id</code>.
	 */
	@Override
	public TaskPermissionRecord setPrincipalId(Long value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>public.task_permission.principal_id</code>.
	 */
	@Column(name = "principal_id", nullable = false, precision = 64)
	@Override
	public Long getPrincipalId() {
		return (Long) getValue(1);
	}

	/**
	 * Setter for <code>public.task_permission.permission</code>.
	 */
	@Override
	public TaskPermissionRecord setPermission(TaskPermissionType value) {
		setValue(2, value);
		return this;
	}

	/**
	 * Getter for <code>public.task_permission.permission</code>.
	 */
	@Column(name = "permission", nullable = false)
	@Override
	public TaskPermissionType getPermission() {
		return (TaskPermissionType) getValue(2);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record3<TaskPermissionType, Integer, Long> key() {
		return (Record3) super.key();
	}

	// -------------------------------------------------------------------------
	// Record3 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<Integer, Long, TaskPermissionType> fieldsRow() {
		return (Row3) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row3<Integer, Long, TaskPermissionType> valuesRow() {
		return (Row3) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return TaskPermission.TASK_PERMISSION.TASK_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field2() {
		return TaskPermission.TASK_PERMISSION.PRINCIPAL_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<TaskPermissionType> field3() {
		return TaskPermission.TASK_PERMISSION.PERMISSION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getTaskId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value2() {
		return getPrincipalId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TaskPermissionType value3() {
		return getPermission();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TaskPermissionRecord value1(Integer value) {
		setTaskId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TaskPermissionRecord value2(Long value) {
		setPrincipalId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TaskPermissionRecord value3(TaskPermissionType value) {
		setPermission(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public TaskPermissionRecord values(Integer value1, Long value2, TaskPermissionType value3) {
		value1(value1);
		value2(value2);
		value3(value3);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(ITaskPermission from) {
		setTaskId(from.getTaskId());
		setPrincipalId(from.getPrincipalId());
		setPermission(from.getPermission());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends ITaskPermission> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached TaskPermissionRecord
	 */
	public TaskPermissionRecord() {
		super(TaskPermission.TASK_PERMISSION);
	}

	/**
	 * Create a detached, initialised TaskPermissionRecord
	 */
	public TaskPermissionRecord(Integer taskId, Long principalId, TaskPermissionType permission) {
		super(TaskPermission.TASK_PERMISSION);

		setValue(0, taskId);
		setValue(1, principalId);
		setValue(2, permission);
	}
}
