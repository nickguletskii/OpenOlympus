/**
 * The MIT License
 * Copyright (c) 2014-2016 Nick Guletskii
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * This class is generated by jOOQ
 */
package org.ng200.openolympus.jooq.tables.daos;


import java.sql.Timestamp;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.ng200.openolympus.jooq.tables.SchemaVersion;
import org.ng200.openolympus.jooq.tables.records.SchemaVersionRecord;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.3"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SchemaVersionDao extends DAOImpl<SchemaVersionRecord, org.ng200.openolympus.jooq.tables.pojos.SchemaVersion, String> {

	/**
	 * Create a new SchemaVersionDao without any configuration
	 */
	public SchemaVersionDao() {
		super(SchemaVersion.SCHEMA_VERSION, org.ng200.openolympus.jooq.tables.pojos.SchemaVersion.class);
	}

	/**
	 * Create a new SchemaVersionDao with an attached configuration
	 */
	public SchemaVersionDao(Configuration configuration) {
		super(SchemaVersion.SCHEMA_VERSION, org.ng200.openolympus.jooq.tables.pojos.SchemaVersion.class, configuration);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected String getId(org.ng200.openolympus.jooq.tables.pojos.SchemaVersion object) {
		return object.getVersion();
	}

	/**
	 * Fetch records that have <code>version_rank IN (values)</code>
	 */
	public List<org.ng200.openolympus.jooq.tables.pojos.SchemaVersion> fetchByVersionRank(Integer... values) {
		return fetch(SchemaVersion.SCHEMA_VERSION.VERSION_RANK, values);
	}

	/**
	 * Fetch records that have <code>installed_rank IN (values)</code>
	 */
	public List<org.ng200.openolympus.jooq.tables.pojos.SchemaVersion> fetchByInstalledRank(Integer... values) {
		return fetch(SchemaVersion.SCHEMA_VERSION.INSTALLED_RANK, values);
	}

	/**
	 * Fetch records that have <code>version IN (values)</code>
	 */
	public List<org.ng200.openolympus.jooq.tables.pojos.SchemaVersion> fetchByVersion(String... values) {
		return fetch(SchemaVersion.SCHEMA_VERSION.VERSION, values);
	}

	/**
	 * Fetch a unique record that has <code>version = value</code>
	 */
	public org.ng200.openolympus.jooq.tables.pojos.SchemaVersion fetchOneByVersion(String value) {
		return fetchOne(SchemaVersion.SCHEMA_VERSION.VERSION, value);
	}

	/**
	 * Fetch records that have <code>description IN (values)</code>
	 */
	public List<org.ng200.openolympus.jooq.tables.pojos.SchemaVersion> fetchByDescription(String... values) {
		return fetch(SchemaVersion.SCHEMA_VERSION.DESCRIPTION, values);
	}

	/**
	 * Fetch records that have <code>type IN (values)</code>
	 */
	public List<org.ng200.openolympus.jooq.tables.pojos.SchemaVersion> fetchByType(String... values) {
		return fetch(SchemaVersion.SCHEMA_VERSION.TYPE, values);
	}

	/**
	 * Fetch records that have <code>script IN (values)</code>
	 */
	public List<org.ng200.openolympus.jooq.tables.pojos.SchemaVersion> fetchByScript(String... values) {
		return fetch(SchemaVersion.SCHEMA_VERSION.SCRIPT, values);
	}

	/**
	 * Fetch records that have <code>checksum IN (values)</code>
	 */
	public List<org.ng200.openolympus.jooq.tables.pojos.SchemaVersion> fetchByChecksum(Integer... values) {
		return fetch(SchemaVersion.SCHEMA_VERSION.CHECKSUM, values);
	}

	/**
	 * Fetch records that have <code>installed_by IN (values)</code>
	 */
	public List<org.ng200.openolympus.jooq.tables.pojos.SchemaVersion> fetchByInstalledBy(String... values) {
		return fetch(SchemaVersion.SCHEMA_VERSION.INSTALLED_BY, values);
	}

	/**
	 * Fetch records that have <code>installed_on IN (values)</code>
	 */
	public List<org.ng200.openolympus.jooq.tables.pojos.SchemaVersion> fetchByInstalledOn(Timestamp... values) {
		return fetch(SchemaVersion.SCHEMA_VERSION.INSTALLED_ON, values);
	}

	/**
	 * Fetch records that have <code>execution_time IN (values)</code>
	 */
	public List<org.ng200.openolympus.jooq.tables.pojos.SchemaVersion> fetchByExecutionTime(Integer... values) {
		return fetch(SchemaVersion.SCHEMA_VERSION.EXECUTION_TIME, values);
	}

	/**
	 * Fetch records that have <code>success IN (values)</code>
	 */
	public List<org.ng200.openolympus.jooq.tables.pojos.SchemaVersion> fetchBySuccess(Boolean... values) {
		return fetch(SchemaVersion.SCHEMA_VERSION.SUCCESS, values);
	}
}
