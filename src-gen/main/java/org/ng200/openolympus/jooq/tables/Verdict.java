/**
 * This class is generated by jOOQ
 */
package org.ng200.openolympus.jooq.tables;


import java.math.BigDecimal;
import java.time.Duration;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;
import org.ng200.openolympus.jooq.Keys;
import org.ng200.openolympus.jooq.Public;
import org.ng200.openolympus.jooq.enums.VerdictStatusType;
import org.ng200.openolympus.jooq.tables.records.VerdictRecord;
import org.ng200.openolympus.util.DurationConverter;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Verdict extends TableImpl<VerdictRecord> {

	private static final long serialVersionUID = -962238502;

	/**
	 * The reference instance of <code>public.verdict</code>
	 */
	public static final Verdict VERDICT = new Verdict();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<VerdictRecord> getRecordType() {
		return VerdictRecord.class;
	}

	/**
	 * The column <code>public.verdict.id</code>.
	 */
	public final TableField<VerdictRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaulted(true), this, "");

	/**
	 * The column <code>public.verdict.score</code>.
	 */
	public final TableField<VerdictRecord, BigDecimal> SCORE = createField("score", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 2), this, "");

	/**
	 * The column <code>public.verdict.maximum_score</code>.
	 */
	public final TableField<VerdictRecord, BigDecimal> MAXIMUM_SCORE = createField("maximum_score", org.jooq.impl.SQLDataType.NUMERIC.precision(19, 2).nullable(false), this, "");

	/**
	 * The column <code>public.verdict.status</code>.
	 */
	public final TableField<VerdictRecord, VerdictStatusType> STATUS = createField("status", org.jooq.util.postgres.PostgresDataType.VARCHAR.asEnumDataType(org.ng200.openolympus.jooq.enums.VerdictStatusType.class), this, "");

	/**
	 * The column <code>public.verdict.viewable_during_contest</code>.
	 */
	public final TableField<VerdictRecord, Boolean> VIEWABLE_DURING_CONTEST = createField("viewable_during_contest", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

	/**
	 * The column <code>public.verdict.path</code>.
	 */
	public final TableField<VerdictRecord, String> PATH = createField("path", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

	/**
	 * The column <code>public.verdict.cpu_time</code>.
	 */
	public final TableField<VerdictRecord, Duration> CPU_TIME = createField("cpu_time", org.jooq.impl.SQLDataType.BIGINT, this, "", new DurationConverter());

	/**
	 * The column <code>public.verdict.real_time</code>.
	 */
	public final TableField<VerdictRecord, Duration> REAL_TIME = createField("real_time", org.jooq.impl.SQLDataType.BIGINT, this, "", new DurationConverter());

	/**
	 * The column <code>public.verdict.memory_peak</code>.
	 */
	public final TableField<VerdictRecord, Long> MEMORY_PEAK = createField("memory_peak", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * The column <code>public.verdict.additional_information</code>.
	 */
	public final TableField<VerdictRecord, String> ADDITIONAL_INFORMATION = createField("additional_information", org.jooq.impl.SQLDataType.CLOB, this, "");

	/**
	 * The column <code>public.verdict.solution_id</code>.
	 */
	public final TableField<VerdictRecord, Long> SOLUTION_ID = createField("solution_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

	/**
	 * Create a <code>public.verdict</code> table reference
	 */
	public Verdict() {
		this("verdict", null);
	}

	/**
	 * Create an aliased <code>public.verdict</code> table reference
	 */
	public Verdict(String alias) {
		this(alias, VERDICT);
	}

	private Verdict(String alias, Table<VerdictRecord> aliased) {
		this(alias, aliased, null);
	}

	private Verdict(String alias, Table<VerdictRecord> aliased, Field<?>[] parameters) {
		super(alias, Public.PUBLIC, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<VerdictRecord, Long> getIdentity() {
		return Keys.IDENTITY_VERDICT;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<VerdictRecord> getPrimaryKey() {
		return Keys.USER_PK;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<VerdictRecord>> getKeys() {
		return Arrays.<UniqueKey<VerdictRecord>>asList(Keys.USER_PK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<VerdictRecord, ?>> getReferences() {
		return Arrays.<ForeignKey<VerdictRecord, ?>>asList(Keys.VERDICT__SOLUTION_FK);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Verdict as(String alias) {
		return new Verdict(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Verdict rename(String name) {
		return new Verdict(name, null);
	}
}
