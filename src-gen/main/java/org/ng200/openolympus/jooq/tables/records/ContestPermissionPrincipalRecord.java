/**
 * This class is generated by jOOQ
 */
package org.ng200.openolympus.jooq.tables.records;


import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;
import org.ng200.openolympus.jooq.tables.ContestPermissionPrincipal;
import org.ng200.openolympus.jooq.tables.interfaces.IContestPermissionPrincipal;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "contest_permission_principal", schema = "public")
public class ContestPermissionPrincipalRecord extends UpdatableRecordImpl<ContestPermissionPrincipalRecord> implements Record2<Integer, Long>, IContestPermissionPrincipal {

	private static final long serialVersionUID = -925866219;

	/**
	 * Setter for <code>public.contest_permission_principal.principal_id</code>.
	 */
	@Override
	public ContestPermissionPrincipalRecord setPrincipalId(Integer value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>public.contest_permission_principal.principal_id</code>.
	 */
	@Column(name = "principal_id", precision = 32)
	@Override
	public Integer getPrincipalId() {
		return (Integer) getValue(0);
	}

	/**
	 * Setter for <code>public.contest_permission_principal.contest_permission_id</code>.
	 */
	@Override
	public ContestPermissionPrincipalRecord setContestPermissionId(Long value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>public.contest_permission_principal.contest_permission_id</code>.
	 */
	@Id
	@Column(name = "contest_permission_id", unique = true, nullable = false, precision = 64)
	@Override
	public Long getContestPermissionId() {
		return (Long) getValue(1);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Long> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record2 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<Integer, Long> fieldsRow() {
		return (Row2) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<Integer, Long> valuesRow() {
		return (Row2) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field1() {
		return ContestPermissionPrincipal.CONTEST_PERMISSION_PRINCIPAL.PRINCIPAL_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field2() {
		return ContestPermissionPrincipal.CONTEST_PERMISSION_PRINCIPAL.CONTEST_PERMISSION_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value1() {
		return getPrincipalId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value2() {
		return getContestPermissionId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ContestPermissionPrincipalRecord value1(Integer value) {
		setPrincipalId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ContestPermissionPrincipalRecord value2(Long value) {
		setContestPermissionId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public ContestPermissionPrincipalRecord values(Integer value1, Long value2) {
		value1(value1);
		value2(value2);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IContestPermissionPrincipal from) {
		setPrincipalId(from.getPrincipalId());
		setContestPermissionId(from.getContestPermissionId());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IContestPermissionPrincipal> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached ContestPermissionPrincipalRecord
	 */
	public ContestPermissionPrincipalRecord() {
		super(ContestPermissionPrincipal.CONTEST_PERMISSION_PRINCIPAL);
	}

	/**
	 * Create a detached, initialised ContestPermissionPrincipalRecord
	 */
	public ContestPermissionPrincipalRecord(Integer principalId, Long contestPermissionId) {
		super(ContestPermissionPrincipal.CONTEST_PERMISSION_PRINCIPAL);

		setValue(0, principalId);
		setValue(1, contestPermissionId);
	}
}
