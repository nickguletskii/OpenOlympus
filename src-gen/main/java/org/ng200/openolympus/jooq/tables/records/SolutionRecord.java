/**
 * The MIT License
 * Copyright (c) 2014-2015 Nick Guletskii
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
/**
 * This class is generated by jOOQ
 */
package org.ng200.openolympus.jooq.tables.records;

import java.math.BigDecimal;
import java.sql.Timestamp;

import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;
import org.ng200.openolympus.jooq.tables.Solution;
import org.ng200.openolympus.jooq.tables.interfaces.ISolution;

/**
 * This class is generated by jOOQ.
 */
@Generated(value = {
						"http://www.jooq.org",
						"jOOQ version:3.6.2"
}, comments = "This class is generated by jOOQ")
@SuppressWarnings({
					"all",
					"unchecked",
					"rawtypes"
})
@Entity
@Table(name = "solution", schema = "public")
public class SolutionRecord extends UpdatableRecordImpl<SolutionRecord>
		implements
		Record8<Long, String, BigDecimal, BigDecimal, Boolean, Timestamp, Long, Integer>,
		ISolution {

	private static final long serialVersionUID = -1234242554;

	/**
	 * Create a detached SolutionRecord
	 */
	public SolutionRecord() {
		super(Solution.SOLUTION);
	}

	/**
	 * Create a detached, initialised SolutionRecord
	 */
	public SolutionRecord(Long id, String file, BigDecimal maximumScore,
			BigDecimal score, Boolean tested, Timestamp timeAdded, Long userId,
			Integer taskId) {
		super(Solution.SOLUTION);

		this.setValue(0, id);
		this.setValue(1, file);
		this.setValue(2, maximumScore);
		this.setValue(3, score);
		this.setValue(4, tested);
		this.setValue(5, timeAdded);
		this.setValue(6, userId);
		this.setValue(7, taskId);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field1() {
		return Solution.SOLUTION.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<String> field2() {
		return Solution.SOLUTION.FILE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<BigDecimal> field3() {
		return Solution.SOLUTION.MAXIMUM_SCORE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<BigDecimal> field4() {
		return Solution.SOLUTION.SCORE;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Boolean> field5() {
		return Solution.SOLUTION.TESTED;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Timestamp> field6() {
		return Solution.SOLUTION.TIME_ADDED;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field7() {
		return Solution.SOLUTION.USER_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Integer> field8() {
		return Solution.SOLUTION.TASK_ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row8<Long, String, BigDecimal, BigDecimal, Boolean, Timestamp, Long, Integer> fieldsRow() {
		return (Row8) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(ISolution from) {
		this.setId(from.getId());
		this.setFile(from.getFile());
		this.setMaximumScore(from.getMaximumScore());
		this.setScore(from.getScore());
		this.setTested(from.getTested());
		this.setTimeAdded(from.getTimeAdded());
		this.setUserId(from.getUserId());
		this.setTaskId(from.getTaskId());
	}

	/**
	 * Getter for <code>public.solution.file</code>.
	 */
	@Column(name = "file", length = 255)
	@Override
	public String getFile() {
		return (String) this.getValue(1);
	}

	/**
	 * Getter for <code>public.solution.id</code>.
	 */
	@Id
	@Column(name = "id", unique = true, nullable = false, precision = 64)
	@Override
	public Long getId() {
		return (Long) this.getValue(0);
	}

	/**
	 * Getter for <code>public.solution.maximum_score</code>.
	 */
	@Column(name = "maximum_score", precision = 19, scale = 2)
	@Override
	public BigDecimal getMaximumScore() {
		return (BigDecimal) this.getValue(2);
	}

	/**
	 * Getter for <code>public.solution.score</code>.
	 */
	@Column(name = "score", precision = 19, scale = 2)
	@Override
	public BigDecimal getScore() {
		return (BigDecimal) this.getValue(3);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * Getter for <code>public.solution.task_id</code>.
	 */
	@Column(name = "task_id", nullable = false, precision = 32)
	@Override
	public Integer getTaskId() {
		return (Integer) this.getValue(7);
	}

	// -------------------------------------------------------------------------
	// Record8 type implementation
	// -------------------------------------------------------------------------

	/**
	 * Getter for <code>public.solution.tested</code>.
	 */
	@Column(name = "tested", nullable = false)
	@Override
	public Boolean getTested() {
		return (Boolean) this.getValue(4);
	}

	/**
	 * Getter for <code>public.solution.time_added</code>.
	 */
	@Column(name = "time_added")
	@Override
	public Timestamp getTimeAdded() {
		return (Timestamp) this.getValue(5);
	}

	/**
	 * Getter for <code>public.solution.user_id</code>.
	 */
	@Column(name = "user_id", precision = 64)
	@Override
	public Long getUserId() {
		return (Long) this.getValue(6);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends ISolution> E into(E into) {
		into.from(this);
		return into;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Long> key() {
		return (Record1) super.key();
	}

	/**
	 * Setter for <code>public.solution.file</code>.
	 */
	@Override
	public SolutionRecord setFile(String value) {
		this.setValue(1, value);
		return this;
	}

	/**
	 * Setter for <code>public.solution.id</code>.
	 */
	@Override
	public SolutionRecord setId(Long value) {
		this.setValue(0, value);
		return this;
	}

	/**
	 * Setter for <code>public.solution.maximum_score</code>.
	 */
	@Override
	public SolutionRecord setMaximumScore(BigDecimal value) {
		this.setValue(2, value);
		return this;
	}

	/**
	 * Setter for <code>public.solution.score</code>.
	 */
	@Override
	public SolutionRecord setScore(BigDecimal value) {
		this.setValue(3, value);
		return this;
	}

	/**
	 * Setter for <code>public.solution.task_id</code>.
	 */
	@Override
	public SolutionRecord setTaskId(Integer value) {
		this.setValue(7, value);
		return this;
	}

	/**
	 * Setter for <code>public.solution.tested</code>.
	 */
	@Override
	public SolutionRecord setTested(Boolean value) {
		this.setValue(4, value);
		return this;
	}

	/**
	 * Setter for <code>public.solution.time_added</code>.
	 */
	@Override
	public SolutionRecord setTimeAdded(Timestamp value) {
		this.setValue(5, value);
		return this;
	}

	/**
	 * Setter for <code>public.solution.user_id</code>.
	 */
	@Override
	public SolutionRecord setUserId(Long value) {
		this.setValue(6, value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value1() {
		return this.getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SolutionRecord value1(Long value) {
		this.setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public String value2() {
		return this.getFile();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SolutionRecord value2(String value) {
		this.setFile(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BigDecimal value3() {
		return this.getMaximumScore();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SolutionRecord value3(BigDecimal value) {
		this.setMaximumScore(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public BigDecimal value4() {
		return this.getScore();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SolutionRecord value4(BigDecimal value) {
		this.setScore(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Boolean value5() {
		return this.getTested();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SolutionRecord value5(Boolean value) {
		this.setTested(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Timestamp value6() {
		return this.getTimeAdded();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SolutionRecord value6(Timestamp value) {
		this.setTimeAdded(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value7() {
		return this.getUserId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SolutionRecord value7(Long value) {
		this.setUserId(value);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Integer value8() {
		return this.getTaskId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SolutionRecord value8(Integer value) {
		this.setTaskId(value);
		return this;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public SolutionRecord values(Long value1, String value2, BigDecimal value3,
			BigDecimal value4, Boolean value5, Timestamp value6, Long value7,
			Integer value8) {
		this.value1(value1);
		this.value2(value2);
		this.value3(value3);
		this.value4(value4);
		this.value5(value5);
		this.value6(value6);
		this.value7(value7);
		this.value8(value8);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row8<Long, String, BigDecimal, BigDecimal, Boolean, Timestamp, Long, Integer> valuesRow() {
		return (Row8) super.valuesRow();
	}
}
