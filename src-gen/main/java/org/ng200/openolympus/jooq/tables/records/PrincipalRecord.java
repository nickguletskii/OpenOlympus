/**
 * This class is generated by jOOQ
 */
package org.ng200.openolympus.jooq.tables.records;


import javax.annotation.Generated;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.UpdatableRecordImpl;
import org.ng200.openolympus.jooq.enums.GeneralPermissionType;
import org.ng200.openolympus.jooq.tables.Principal;
import org.ng200.openolympus.jooq.tables.interfaces.IPrincipal;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.6.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Entity
@Table(name = "principal", schema = "public")
public class PrincipalRecord extends UpdatableRecordImpl<PrincipalRecord> implements Record2<Long, GeneralPermissionType[]>, IPrincipal {

	private static final long serialVersionUID = -1783300926;

	/**
	 * Setter for <code>public.principal.id</code>.
	 */
	@Override
	public PrincipalRecord setId(Long value) {
		setValue(0, value);
		return this;
	}

	/**
	 * Getter for <code>public.principal.id</code>.
	 */
	@Id
	@Column(name = "id", unique = true, nullable = false, precision = 64)
	@Override
	public Long getId() {
		return (Long) getValue(0);
	}

	/**
	 * Setter for <code>public.principal.permissions</code>.
	 */
	@Override
	public PrincipalRecord setPermissions(GeneralPermissionType[] value) {
		setValue(1, value);
		return this;
	}

	/**
	 * Getter for <code>public.principal.permissions</code>.
	 */
	@Column(name = "permissions", nullable = false)
	@Override
	public GeneralPermissionType[] getPermissions() {
		return (GeneralPermissionType[]) getValue(1);
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Record1<Long> key() {
		return (Record1) super.key();
	}

	// -------------------------------------------------------------------------
	// Record2 type implementation
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<Long, GeneralPermissionType[]> fieldsRow() {
		return (Row2) super.fieldsRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Row2<Long, GeneralPermissionType[]> valuesRow() {
		return (Row2) super.valuesRow();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<Long> field1() {
		return Principal.PRINCIPAL.ID;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Field<GeneralPermissionType[]> field2() {
		return Principal.PRINCIPAL.PERMISSIONS;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Long value1() {
		return getId();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public GeneralPermissionType[] value2() {
		return getPermissions();
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PrincipalRecord value1(Long value) {
		setId(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PrincipalRecord value2(GeneralPermissionType[] value) {
		setPermissions(value);
		return this;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public PrincipalRecord values(Long value1, GeneralPermissionType[] value2) {
		value1(value1);
		value2(value2);
		return this;
	}

	// -------------------------------------------------------------------------
	// FROM and INTO
	// -------------------------------------------------------------------------

	/**
	 * {@inheritDoc}
	 */
	@Override
	public void from(IPrincipal from) {
		setId(from.getId());
		setPermissions(from.getPermissions());
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public <E extends IPrincipal> E into(E into) {
		into.from(this);
		return into;
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Create a detached PrincipalRecord
	 */
	public PrincipalRecord() {
		super(Principal.PRINCIPAL);
	}

	/**
	 * Create a detached, initialised PrincipalRecord
	 */
	public PrincipalRecord(Long id, GeneralPermissionType[] permissions) {
		super(Principal.PRINCIPAL);

		setValue(0, id);
		setValue(1, permissions);
	}
}
